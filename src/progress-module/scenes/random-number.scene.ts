import { Scene, SceneEnter, SceneLeave, Command, Ctx, Action } from 'nestjs-telegraf';
import { SceneContext } from 'telegraf/typings/scenes';
import { Update } from 'telegraf/typings/core/types/typegram';
import { CHANGE_PROFESSION } from '../../app.contants';
import { Context } from '../../interfaces/context.interface';

@Scene(CHANGE_PROFESSION)
export class RandomNumberScene {
  @SceneEnter()
  async enter(@Ctx() context: SceneContext) {
    context.reply('C–µ–π—á–∞—Å —è —Ö–æ—á—É —É—Ç–æ—á–Ω–∏—Ç—å, –∫–∞–∫–∞—è —Ñ–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –≤–∞—Å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ? ', {
      reply_markup: {
        inline_keyboard: [
          [{ text: '–û—á–Ω–∞—è —Ñ–æ—Ä–º–∞', callback_data: '1' }],
          [{ text: '–ó–∞–æ—á–Ω–∞—è —Ñ–æ—Ä–º–∞', callback_data: '2' }],
          [{ text: '–í—ã–µ–∑–¥–Ω–∞—è', callback_data: '3' }],
        ],
      },
    });
  }

  @Action(/1|2|3/)
  async onAnswer(
    @Ctx() context: SceneContext & { update: Update.CallbackQueryUpdate }
  ) {
    const cbQuery = context.update.callback_query;
    const userAnswer = 'data' in cbQuery ? cbQuery.data : null;
    switch (userAnswer) {
      case '1':
        context.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—á–Ω—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!')
        context.scene.leave()
        break;
      case '2':
        context.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –∑–∞–æ—á–Ω—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!')
        context.scene.leave()
        break;
      case '3':
        context.reply('–í—ã –≤—ã–±—Ä–∞–ª–∏ –í—ã–µ–∑–¥–Ω—É—é —Ñ–æ—Ä–º—É –æ–±—É—á–µ–Ω–∏—è, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!')
        context.scene.leave()
        break;
    }
  }

  // @SceneLeave()
  // onSceneLeave(): string {
  //   console.log('Leave from scene');
  //   return 'Bye Bye üëã';
  // }

  @Command(['rng', 'random'])
  onRandomCommand(): number {
    console.log('Use "random" command');
    return Math.floor(Math.random() * 11);
  }

  @Command('leave')
  async onLeaveCommand(ctx: Context): Promise<void> {
    await ctx.scene.leave();
  }
}